<?php

if ( ! class_exists('Clipchamp_Button') ) {

	/**
	 * Main / front controller class
	 *
	 */
	class Clipchamp_Button extends CCB_Module {
		protected static $readable_properties  = array();    // These should really be constants, but PHP doesn't allow class constants to be arrays
		protected static $writeable_properties = array();
		protected $modules;

		const VERSION    = '0.4a';
		const PREFIX     = 'ccb_';
		const DEBUG_MODE = false;


		/*
		 * Magic methods
		 */

		/**
		 * Constructor
		 *
		 * @mvc Controller
		 */
		protected function __construct() {
			$this->register_hook_callbacks();

			$this->modules = array(
				'CCB_Settings'		=> CCB_Settings::get_instance(),
				'CCB_Shortcode'		=> CCB_Shortcode::get_instance()
				//'WPPS_Cron'		=> CCB_Cron::get_instance()
			);
		}


		/*
		 * Static methods
		 */

		/**
		 * Enqueues CSS, JavaScript, etc
		 *
		 * @mvc Controller
		 */
		public static function load_resources() {
			wp_register_script(
				self::PREFIX . 'button',
				plugins_url( 'javascript/button.js', dirname( __FILE__ ) ),
				array( 'jquery' ),
				self::VERSION,
				true
			);

            wp_register_script(
                self::PREFIX . 'admin-script',
                plugins_url( 'javascript/admin-script.js', dirname( __FILE__ ) ),
                array( 'wp-color-picker', 'jquery' ),
                self::VERSION,
                true
            );

			wp_register_style(
				self::PREFIX . 'admin',
				plugins_url( 'css/admin.css', dirname( __FILE__ ) ),
				array(),
				self::VERSION,
				'all'
			);

			if ( is_admin() ) {
                wp_enqueue_media();
				wp_enqueue_style( self::PREFIX . 'admin' );
                wp_enqueue_style( 'wp-color-picker' );
                wp_enqueue_script( self::PREFIX . 'admin-script' );
			} else {
				wp_enqueue_script( self::PREFIX . 'button' );
                wp_enqueue_style( self::PREFIX . 'button' );
			}
		}

		/**
		 * Clears caches of content generated by caching plugins like WP Super Cache
		 *
		 * @mvc Model
		 */
		protected static function clear_caching_plugins() {
			// WP Super Cache
			if ( function_exists( 'wp_cache_clear_cache' ) ) {
				wp_cache_clear_cache();
			}

			// W3 Total Cache
			if ( class_exists( 'W3_Plugin_TotalCacheAdmin' ) ) {
				$w3_total_cache = w3_instance( 'W3_Plugin_TotalCacheAdmin' );

				if ( method_exists( $w3_total_cache, 'flush_all' ) ) {
					$w3_total_cache->flush_all();
				}
			}
		}

		/**
		 * Handles the file upload.
		 *
		 * @mvc Controller
		 */
		public static function upload() {
			if ( ! function_exists( 'wp_handle_upload' ) ) {
				require_once( ABSPATH . 'wp-admin/includes/file.php' );
			}

			$upload_overrides = array( 'test_form' => false );

			if ( ! empty( $_FILES['video']['name'] ) ) {
				//TODO:Change upload dir
				$video = wp_handle_upload( $_FILES['video'], $upload_overrides );
			}

			if ( $video && ! isset( $video['error'] ) ) {

				$attachment = array(
					'guid'           => $video['url'],
					'post_mime_type' => $video['type'],
					'post_title'     => preg_replace( '/\.[^.]+$/', '', basename( $video['file'] ) ),
					'post_content'   => '',
					'post_status'    => 'inherit'
				);

				$attach_id = wp_insert_attachment( $attachment, $video['file'], 0 );

				echo $attach_id;

			} else {
				echo $video['error'];
			}
		}


		/*
		 * Instance methods
		 */

		/**
		 * Prepares sites to use the plugin during single or network-wide activation
		 *
		 * @mvc Controller
		 *
		 * @param bool $network_wide
		 */
		public function activate( $network_wide ) {
			if ( $network_wide && is_multisite() ) {
				$sites = wp_get_sites( array( 'limit' => false ) );

				foreach ( $sites as $site ) {
					switch_to_blog( $site['blog_id'] );
					$this->single_activate( $network_wide );
					restore_current_blog();
				}
			} else {
				$this->single_activate( $network_wide );
			}
		}

		/**
		 * Runs activation code on a new WPMS site when it's created
		 *
		 * @mvc Controller
		 *
		 * @param int $blog_id
		 */
		public function activate_new_site( $blog_id ) {
			switch_to_blog( $blog_id );
			$this->single_activate( true );
			restore_current_blog();
		}

		/**
		 * Prepares a single blog to use the plugin
		 *
		 * @mvc Controller
		 *
		 * @param bool $network_wide
		 */
		protected function single_activate( $network_wide ) {
			foreach ( $this->modules as $module ) {
				$module->activate( $network_wide );
			}

			flush_rewrite_rules();
		}

		/**
		 * Rolls back activation procedures when de-activating the plugin
		 *
		 * @mvc Controller
		 */
		public function deactivate() {
			foreach ( $this->modules as $module ) {
				$module->deactivate();
			}

			flush_rewrite_rules();
		}

		/**
		 * Register callbacks for actions and filters
		 *
		 * @mvc Controller
		 */
		public function register_hook_callbacks() {
			add_action( 'wpmu_new_blog',				__CLASS__ . '::activate_new_site' );
			add_action( 'wp_enqueue_scripts',			__CLASS__ . '::load_resources' );
			add_action( 'admin_enqueue_scripts',		__CLASS__ . '::load_resources' );
			add_action( 'wp_ajax_ccb_upload',			__CLASS__ . '::upload' );
			add_action( 'wp_ajax_nopriv_ccb_upload',	__CLASS__ . '::upload' );

			add_action( 'init',							array( $this, 'init' ) );
			add_action( 'init',							array( $this, 'upgrade' ), 11 );

			add_filter ( 'the_content',					array( $this, 'append_post' ), 0 );
		}

		/**
		 * Initializes variables
		 *
		 * @mvc Controller
		 */
		public function init() {
			try {
				$instance_example = new CCB_Instance_Class( 'Instance example', '42' );
				//add_notice( $instance_example->foo .' '. $instance_example->bar );
			} catch ( Exception $exception ) {
				add_notice( __METHOD__ . ' error: ' . $exception->getMessage(), 'error' );
			}
		}

		/**
		 * Checks if the plugin was recently updated and upgrades if necessary
		 *
		 * @mvc Controller
		 *
		 * @param string $db_version
		 */
		public function upgrade( $db_version = 0 ) {
			if ( version_compare( $this->modules['CCB_Settings']->settings['db-version'], self::VERSION, '==' ) ) {
				return;
			}

			foreach ( $this->modules as $module ) {
				$module->upgrade( $this->modules['CCB_Settings']->settings['db-version'] );
			}

			$this->modules['CCB_Settings']->settings = array( 'db-version' => self::VERSION );
			self::clear_caching_plugins();
		}

		/**
		 * Checks that the object is in a correct state
		 *
		 * @mvc Model
		 *
		 * @param string $property An individual property to check, or 'all' to check all of them
		 * @return bool
		 */
		protected function is_valid( $property = 'all' ) {
			return true;
		}

		/**
		 * Appends the shortcode to the end of each post.
		 *
		 * @mvc Model
		 *
		 * @param string $content
		 * @return string
		 */
		public function append_post( $content ) {
			$included_post_types = $this->modules['CCB_Settings']->settings['general']['field-appendPost'];
			if ( is_singular() && in_array( get_post_type(), $included_post_types ) ) {
				$content .= '[clipchamp]';
			}
			return $content;
		}
	} // end Clipchamp_Button
}